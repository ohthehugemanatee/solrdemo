<?php
/**
 * @file
 * Code for the Solr Benchnmark feature.
 */

include_once 'solrbm.features.inc';

/**
 * @file
 * Install and update functions for the slr_migrate module.
 */

/**
 * Implements hook_entity_info().
 */
function solrbm_entity_info() {
  return array(
    'solrbm_candidate' => array(
      'label' => t('SolrBM Candidate'),
      'fieldable' => FALSE,
      'base table' => 'candidates',
      'entity keys' => array(
        'id' => 'cid',
        'label' => 'name',
      ),
      'controller class' => 'SolrBmCandidateController',
      'label callback' => 'solrbm_candidate_label',
      'load hook' => 'solrbm_candidate_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
    'solrbm_remark' => array(
      'label' => t('SolrBM Comment'),
      'fieldable' => FALSE,
      'base table' => 'comments',
      'entity keys' => array(
        'id' => 'co_id',
      ),
      'controller class' => 'SolrBmRemarkController',
      'label callback' => 'solrbm_remark_label',
      'load hook' => 'solrbm_remark_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
    'solrbm_position' => array(
      'label' => t('SolrBM Position'),
      'fieldable' => FALSE,
      'base table' => 'positions',
      'entity keys' => array(
        'id' => 'po_id',
        'label' => 'pos_name',
      ),
      'controller class' => 'SolrBmPositionController',
      'label callback' => 'solrbm_position_label',
      'load hook' => 'solrbm_position_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );
}

/**
 * @param EntityMetadataWrapper $entity
 *
 * @return string
 */
function solrbm_candidate_label(EntityMetadataWrapper $entity) {
  return $entity->label();
}

/**
 * @param int|null $id
 * @param array $reset
 *
 * @return mixed
 */
function solrbm_candidate_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $conditions = array();
  $entities = solrbm_candidate_load_multiple($ids, $conditions, $reset);

  return $entities ? reset($entities) : FALSE;
}

/**
 * @param int[]|false $ids
 * @param array $conditions
 * @param bool $reset
 *
 * @return array
 */
function solrbm_candidate_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('solrbm_candidate', $ids, $conditions, $reset);
}

/**
 * @param EntityMetadataWrapper $entity
 *
 * @return string
 */
function solrbm_remark_label(EntityMetadataWrapper $entity) {
  return $entity->label();
}

/**
 * @param int|null $id
 * @param array $reset
 *
 * @return mixed
 */
function solrbm_remark_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $conditions = array();
  $entities = solrbm_remark_load_multiple($ids, $conditions, $reset);

  return $entities ? reset($entities) : FALSE;
}

/**
 * @param array $ids
 * @param array $conditions
 * @param bool $reset
 *
 * @return array
 */
function solrbm_remark_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('solrbm_remark', $ids, $conditions, $reset);
}

/**
 * @param EntityMetadataWrapper $entity
 *
 * @return string
 */
function solrbm_position_label(EntityMetadataWrapper $entity) {
  return $entity->label();
}

/**
 * @param int|null $id
 * @param array $reset
 *
 * @return mixed
 */
function solrbm_position_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $conditions = array();
  $entities = solrbm_position_load_multiple($ids, $conditions, $reset);

  return $entities ? reset($entities) : FALSE;
}

/**
 * @param array $ids
 * @param array $conditions
 * @param bool $reset
 *
 * @return mixed
 */
function solrbm_position_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('solrbm_position', $ids, $conditions, $reset);
}
